public class Student {

	private String name;
	private int id;
	private double gpa;

	public Student(String name, int id, double gpa) {
		super();
		this.name = name;
		this.id = id;
		this.gpa = gpa;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public double getGpa() {
		return gpa;
	}

	public void setGpa(double gpa) {
		this.gpa = gpa;
	}

	@Override
	public String toString() {
		return "[name=" + name + ", id=" + id + ", gpa=" + gpa + "]";
	}

}

import java.util.ArrayList;

public class Stack {

	private ArrayList<Student> list = new ArrayList<>();

	public boolean isEmpty() {
		return list.isEmpty();
	}

	public int getSize() {
		return list.size();
	}

	public String pop() {
		Student student = list.get(getSize() - 1);
		list.remove(getSize() - 1);
		return student.toString();
	}

	public void push(Student student) {
		list.add(student);
	}

}

import java.util.ArrayList;

public class Queue {
	private ArrayList<Student> list = new ArrayList<>();

	public boolean isEmpty() {
		return list.isEmpty();
	}
	
	public String remove() {
		Student student = list.get(0);
		list.remove(0);
		return student.toString();
	}
	
	public void insert(Student value) {
		list.add(value);
	}
}

import javafx.application.Application; 
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class HW1 extends Application {

	public static int counter = 0;

	public static void main(String[] args) {

		Application.launch(args);
	}

	public void start(Stage primaryStage) {
		BorderPane bp = new BorderPane();

		VBox buttons1 = new VBox();

		Button b1 = new Button("STACK PUSH");
		Button b2 = new Button("STACK POP");

		buttons1.getChildren().addAll(b1, b2);

		buttons1.setAlignment(Pos.CENTER_LEFT);

		bp.setLeft(buttons1);

		VBox buttons2 = new VBox();

		Button b3 = new Button("QUEUE INSERT");
		Button b4 = new Button("QUEUE REMOVE");

		buttons2.getChildren().addAll(b3, b4);

		buttons2.setAlignment(Pos.CENTER_RIGHT);

		bp.setRight(buttons2);

		GridPane gp = new GridPane();

		Text t1 = new Text("Student Name:");
		Text t2 = new Text("Student GPA:");
		TextField tf1 = new TextField();
		TextField tf2 = new TextField();

		gp.addRow(0, t1);
		gp.addRow(0, tf1);

		gp.addRow(1, t2);
		gp.addRow(1, tf2);

		gp.setAlignment(Pos.TOP_CENTER);

		bp.setTop(gp);

		VBox text = new VBox();

		Text t3 = new Text("Most Recent Removed Student: ");
		Text t4 = new Text("");

		text.getChildren().addAll(t3, t4);

		text.setAlignment(Pos.BOTTOM_CENTER);

		bp.setBottom(text);

		Scene scene = new Scene(bp, 300, 200);
		primaryStage.setScene(scene);
		primaryStage.show();

		Stack s1 = new Stack();
		Queue q1 = new Queue();

		b1.setOnAction(e -> {
			if (tf1.getText().equals("")) {
				System.out.println("Put a name in first field");
			} else if (tf2.getText().equals("")) {
				System.out.println("Put a gpa in second field");
			} else {
				counter++;
				s1.push(new Student(tf1.getText(), counter, Double.parseDouble(tf2.getText())));
				tf1.clear();
				tf2.clear();
			}
		});
		b2.setOnAction(e -> {

			if (s1.isEmpty()) {
				System.out.println("The stack is empty");
			} else {
				t4.setText(s1.pop());
			}
		});
		
		b3.setOnAction(e -> {
			if (tf1.getText().equals("")) {
				System.out.println("Put a name in first field");
			} else if (tf2.getText().equals("")) {
				System.out.println("Put a gpa in second field");
			} else {
				counter++;
				q1.insert(new Student(tf1.getText(), counter, Double.parseDouble(tf2.getText())));
				tf1.clear();
				tf2.clear();
			}
		});
		b4.setOnAction(e -> {
			if (q1.isEmpty()) {
				System.out.println("The queue is empty");
			} else {
				t4.setText(q1.remove());
			}
		});
	}

}

